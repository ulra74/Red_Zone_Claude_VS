#!/usr/bin/env python
"""
Script para configurar la base de datos de producci√≥n en PostgreSQL
"""

import os
import sys
import django
from pathlib import Path

# A√±adir el directorio del proyecto al path
BASE_DIR = Path(__file__).resolve().parent
sys.path.append(str(BASE_DIR))

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'red_zone_academy.settings_production')
django.setup()

from django.core.management import execute_from_command_line
from django.contrib.auth import get_user_model
from core.models import Oposicion, Tema, Apartado, Pregunta, BancoPregunta

def setup_database():
    """Configura la base de datos desde cero"""
    
    print("üî• Red Zone Academy - Configuraci√≥n de Base de Datos PostgreSQL")
    print("=" * 60)
    
    # 1. Ejecutar migraciones
    print("üì¶ Ejecutando migraciones...")
    execute_from_command_line(['manage.py', 'migrate'])
    
    # 2. Crear superusuario
    print("üë§ Creando superusuario...")
    User = get_user_model()
    
    if not User.objects.filter(username='admin').exists():
        admin = User.objects.create_superuser(
            username='admin',
            email='admin@redzone.com',
            password='admin123',
            first_name='Administrador',
            last_name='Red Zone',
            user_type='admin'
        )
        print(f"‚úÖ Superusuario creado: admin/admin123")
    else:
        print("‚ÑπÔ∏è El superusuario admin ya existe")
    
    # 3. Crear usuarios estudiantes de ejemplo
    print("üë• Creando estudiantes de ejemplo...")
    estudiantes_data = [
        {'username': 'jperez', 'first_name': 'Juan', 'last_name': 'P√©rez Garc√≠a', 'email': 'juan.perez@email.com'},
        {'username': 'mlopez', 'first_name': 'Mar√≠a', 'last_name': 'L√≥pez Rodr√≠guez', 'email': 'maria.lopez@email.com'},
        {'username': 'arojas', 'first_name': 'Antonio', 'last_name': 'Rojas Mart√≠n', 'email': 'antonio.rojas@email.com'},
        {'username': 'cgomez', 'first_name': 'Carmen', 'last_name': 'G√≥mez Santos', 'email': 'carmen.gomez@email.com'},
        {'username': 'dgarcia', 'first_name': 'David', 'last_name': 'Garc√≠a Fern√°ndez', 'email': 'david.garcia@email.com'},
    ]
    
    for data in estudiantes_data:
        if not User.objects.filter(username=data['username']).exists():
            User.objects.create_user(
                username=data['username'],
                password='estudiante123',
                first_name=data['first_name'],
                last_name=data['last_name'],
                email=data['email'],
                user_type='student'
            )
            print(f"‚úÖ Estudiante creado: {data['first_name']} {data['last_name']} ({data['username']})")
    
    # 4. Crear oposici√≥n de ejemplo
    print("üî• Creando oposici√≥n de ejemplo...")
    oposicion, created = Oposicion.objects.get_or_create(
        nombre="Bombero/a - Ayuntamiento 2024",
        defaults={
            'descripcion': 'Oposici√≥n para el cuerpo de bomberos del ayuntamiento. Incluye temario completo y ejercicios pr√°cticos.',
            'fecha_convocatoria': '2024-06-15'
        }
    )
    
    if created:
        # Asignar todos los estudiantes a la oposici√≥n
        estudiantes = User.objects.filter(user_type='student')
        oposicion.alumnos_con_acceso.set(estudiantes)
        print(f"‚úÖ Oposici√≥n creada: {oposicion.nombre}")
    
    # 5. Crear temas de ejemplo
    print("üìö Creando temas de ejemplo...")
    temas_data = [
        {
            'nombre': 'Legislaci√≥n sobre Prevenci√≥n de Riesgos Laborales',
            'descripcion': 'Marco normativo de prevenci√≥n de riesgos laborales aplicado al cuerpo de bomberos.',
            'orden': 1
        },
        {
            'nombre': 'T√©cnicas de Extinci√≥n de Incendios',
            'descripcion': 'M√©todos y t√©cnicas para la extinci√≥n de diferentes tipos de incendios.',
            'orden': 2
        },
        {
            'nombre': 'Rescate en Altura y Espacios Confinados',
            'descripci√≥n': 'Procedimientos de rescate en situaciones de altura y espacios confinados.',
            'orden': 3
        },
        {
            'nombre': 'Primeros Auxilios y RCP',
            'descripcion': 'T√©cnicas de primeros auxilios y reanimaci√≥n cardiopulmonar.',
            'orden': 4
        }
    ]
    
    for tema_data in temas_data:
        tema, created = Tema.objects.get_or_create(
            nombre=tema_data['nombre'],
            defaults=tema_data
        )
        
        if created:
            tema.oposiciones.add(oposicion)
            tema.alumnos_con_acceso.set(estudiantes)
            print(f"‚úÖ Tema creado: {tema.nombre}")
            
            # Crear apartados para cada tema
            apartados_data = [
                {'nombre': f'Introducci√≥n a {tema.nombre}', 'orden': 1},
                {'nombre': f'Normativa y Regulaci√≥n', 'orden': 2},
                {'nombre': f'Procedimientos Pr√°cticos', 'orden': 3},
                {'nombre': f'Casos Pr√°cticos', 'orden': 4}
            ]
            
            for apartado_data in apartados_data:
                apartado, created = Apartado.objects.get_or_create(
                    tema=tema,
                    nombre=apartado_data['nombre'],
                    defaults=apartado_data
                )
                
                if created:
                    # Crear preguntas de ejemplo para cada apartado
                    for i in range(1, 6):  # 5 preguntas por apartado
                        pregunta_data = {
                            'texto': f'¬øCu√°l es el procedimiento correcto en {apartado.nombre.lower()} - Pregunta {i}?',
                            'opcion_a': f'Opci√≥n A para pregunta {i}',
                            'opcion_b': f'Opci√≥n B para pregunta {i}',
                            'opcion_c': f'Opci√≥n C para pregunta {i}',
                            'respuesta_correcta': 'A',
                            'aclaracion': f'La respuesta correcta es A porque explica el procedimiento est√°ndar seg√∫n la normativa vigente.',
                            'activa': True
                        }
                        
                        Pregunta.objects.get_or_create(
                            apartado=apartado,
                            texto=pregunta_data['texto'],
                            defaults=pregunta_data
                        )
    
    print("‚úÖ Base de datos configurada exitosamente!")
    print("\n" + "=" * 60)
    print("üéØ DATOS DE ACCESO:")
    print("Admin: admin / admin123")
    print("Estudiantes: jperez, mlopez, arojas, cgomez, dgarcia / estudiante123")
    print("=" * 60)

if __name__ == '__main__':
    setup_database()