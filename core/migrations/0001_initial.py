# Generated by Django 5.0.14 on 2025-06-29 17:55

import core.models
import datetime
import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Categoria',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=200)),
                ('descripcion', models.TextField(blank=True)),
                ('color', models.CharField(default='#007bff', help_text='Color hexadecimal', max_length=7)),
                ('orden', models.PositiveIntegerField(default=0)),
                ('activa', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Categoría',
                'verbose_name_plural': 'Categorías',
                'ordering': ['orden', 'nombre'],
            },
        ),
        migrations.CreateModel(
            name='DesafioSemanal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=200)),
                ('descripcion', models.TextField()),
                ('icono', models.CharField(max_length=50)),
                ('color', models.CharField(default='#ffc107', max_length=7)),
                ('fecha_inicio', models.DateField()),
                ('fecha_fin', models.DateField()),
                ('criterio_json', models.JSONField()),
                ('recompensa_puntos', models.IntegerField(default=50)),
                ('recompensa_descripcion', models.CharField(max_length=500)),
                ('activo', models.BooleanField(default=True)),
                ('max_participantes', models.IntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Desafío Semanal',
                'verbose_name_plural': 'Desafíos Semanales',
                'ordering': ['-fecha_inicio'],
            },
        ),
        migrations.CreateModel(
            name='EjercicioFisico',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=200)),
                ('categoria', models.CharField(choices=[('resistencia', 'Resistencia'), ('fuerza', 'Fuerza'), ('velocidad', 'Velocidad'), ('agilidad', 'Agilidad'), ('flexibilidad', 'Flexibilidad'), ('natacion', 'Natación'), ('escalada', 'Escalada')], max_length=20)),
                ('descripcion', models.TextField()),
                ('instrucciones', models.TextField(blank=True)),
                ('video_demostrativo', models.FileField(blank=True, null=True, upload_to='ejercicios/videos/')),
                ('imagen', models.ImageField(blank=True, null=True, upload_to='ejercicios/imagenes/')),
                ('tiempo_objetivo_hombre', models.DurationField(blank=True, null=True)),
                ('tiempo_objetivo_mujer', models.DurationField(blank=True, null=True)),
                ('repeticiones_objetivo', models.IntegerField(blank=True, null=True)),
                ('distancia_objetivo', models.FloatField(blank=True, help_text='En metros', null=True)),
                ('peso_objetivo', models.FloatField(blank=True, help_text='En kg', null=True)),
                ('baremo_excelente', models.CharField(blank=True, max_length=100)),
                ('baremo_bueno', models.CharField(blank=True, max_length=100)),
                ('baremo_aceptable', models.CharField(blank=True, max_length=100)),
                ('baremo_insuficiente', models.CharField(blank=True, max_length=100)),
                ('es_obligatorio_bomberos', models.BooleanField(default=False)),
                ('orden', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Ejercicio Físico',
                'verbose_name_plural': 'Ejercicios Físicos',
                'ordering': ['orden', 'nombre'],
            },
        ),
        migrations.CreateModel(
            name='Logro',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=200)),
                ('descripcion', models.TextField()),
                ('icono', models.CharField(help_text='Icono de Bootstrap Icons', max_length=50)),
                ('color', models.CharField(default='#007bff', help_text='Color hexadecimal', max_length=7)),
                ('tipo', models.CharField(choices=[('estudio', 'Estudio'), ('fisico', 'Físico'), ('examenes', 'Exámenes'), ('constancia', 'Constancia'), ('social', 'Social'), ('especial', 'Especial')], max_length=20)),
                ('criterio_json', models.JSONField(help_text='Criterios en formato JSON')),
                ('puntos', models.IntegerField(default=100)),
                ('es_secreto', models.BooleanField(default=False)),
                ('activo', models.BooleanField(default=True)),
                ('orden', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Logro',
                'verbose_name_plural': 'Logros',
                'ordering': ['orden', 'nombre'],
            },
        ),
        migrations.CreateModel(
            name='ArchivoOposicion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(help_text='Nombre descriptivo del archivo', max_length=200)),
                ('descripcion', models.TextField(blank=True, help_text='Descripción opcional del contenido')),
                ('archivo', models.FileField(upload_to=core.models.upload_to_oposicion, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'doc', 'docx', 'ppt', 'pptx', 'xls', 'xlsx', 'mp4', 'avi', 'mov', 'mp3', 'wav', 'jpg', 'jpeg', 'png', 'gif'])])),
                ('tipo', models.CharField(choices=[('pdf', 'PDF'), ('video', 'Video'), ('audio', 'Audio'), ('imagen', 'Imagen'), ('documento', 'Documento'), ('presentacion', 'Presentación'), ('otro', 'Otro')], default='documento', max_length=20)),
                ('tamaño', models.PositiveIntegerField(blank=True, help_text='Tamaño en bytes', null=True)),
                ('es_publico', models.BooleanField(default=True, help_text='Si está marcado, todos los estudiantes con acceso a la oposición podrán ver este archivo')),
                ('fecha_subida', models.DateTimeField(auto_now_add=True)),
                ('descargas', models.PositiveIntegerField(default=0)),
                ('subido_por', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='archivos_oposicion_subidos', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Archivo de Oposición',
                'verbose_name_plural': 'Archivos de Oposiciones',
                'ordering': ['-fecha_subida'],
            },
        ),
        migrations.CreateModel(
            name='ArchivoTema',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(help_text='Nombre descriptivo del archivo', max_length=200)),
                ('descripcion', models.TextField(blank=True, help_text='Descripción opcional del contenido')),
                ('archivo', models.FileField(upload_to=core.models.upload_to_tema, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'doc', 'docx', 'ppt', 'pptx', 'xls', 'xlsx', 'mp4', 'avi', 'mov', 'mp3', 'wav', 'jpg', 'jpeg', 'png', 'gif'])])),
                ('tipo', models.CharField(choices=[('pdf', 'PDF'), ('video', 'Video'), ('audio', 'Audio'), ('imagen', 'Imagen'), ('documento', 'Documento'), ('presentacion', 'Presentación'), ('otro', 'Otro')], default='documento', max_length=20)),
                ('tamaño', models.PositiveIntegerField(blank=True, help_text='Tamaño en bytes', null=True)),
                ('es_publico', models.BooleanField(default=True, help_text='Si está marcado, todos los estudiantes con acceso al tema podrán ver este archivo')),
                ('fecha_subida', models.DateTimeField(auto_now_add=True)),
                ('descargas', models.PositiveIntegerField(default=0)),
                ('orden', models.PositiveIntegerField(default=0, help_text='Orden de aparición en el tema')),
                ('subido_por', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='archivos_tema_subidos', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Archivo de Tema',
                'verbose_name_plural': 'Archivos de Temas',
                'ordering': ['orden', '-fecha_subida'],
            },
        ),
        migrations.CreateModel(
            name='DescargaArchivo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fecha_descarga', models.DateTimeField(auto_now_add=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('archivo_oposicion', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='registros_descarga', to='core.archivooposicion')),
                ('archivo_tema', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='registros_descarga', to='core.archivotema')),
                ('usuario', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Descarga de Archivo',
                'verbose_name_plural': 'Descargas de Archivos',
                'ordering': ['-fecha_descarga'],
            },
        ),
        migrations.CreateModel(
            name='EjercicioSesion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('orden', models.PositiveIntegerField()),
                ('series_planificadas', models.IntegerField(default=1)),
                ('repeticiones_planificadas', models.IntegerField(blank=True, null=True)),
                ('tiempo_planificado', models.DurationField(blank=True, null=True)),
                ('peso_planificado', models.FloatField(blank=True, null=True)),
                ('descanso_entre_series', models.DurationField(blank=True, null=True)),
                ('series_realizadas', models.IntegerField(default=0)),
                ('repeticiones_realizadas', models.IntegerField(blank=True, null=True)),
                ('tiempo_realizado', models.DurationField(blank=True, null=True)),
                ('peso_utilizado', models.FloatField(blank=True, null=True)),
                ('resultado_satisfactorio', models.BooleanField(default=False)),
                ('mejora_respecto_anterior', models.BooleanField(default=False)),
                ('observaciones', models.TextField(blank=True)),
                ('ejercicio', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.ejerciciofisico')),
            ],
            options={
                'verbose_name': 'Ejercicio en Sesión',
                'verbose_name_plural': 'Ejercicios en Sesión',
                'ordering': ['orden'],
            },
        ),
        migrations.CreateModel(
            name='Examen',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('titulo', models.CharField(max_length=200)),
                ('descripcion', models.TextField(blank=True)),
                ('tipo', models.CharField(choices=[('test', 'Test de Opción Múltiple'), ('simulacro', 'Simulacro de Examen'), ('practica', 'Práctica Libre'), ('evaluacion', 'Evaluación Oficial')], default='test', max_length=20)),
                ('numero_preguntas', models.PositiveIntegerField(default=20)),
                ('tiempo_limite', models.PositiveIntegerField(default=30, help_text='Tiempo en minutos')),
                ('puntuacion_maxima', models.PositiveIntegerField(default=100)),
                ('nota_minima_aprobado', models.FloatField(default=5.0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('preguntas_aleatorias', models.BooleanField(default=True)),
                ('respuestas_aleatorias', models.BooleanField(default=True)),
                ('mostrar_resultados_inmediatos', models.BooleanField(default=False)),
                ('permitir_revision', models.BooleanField(default=True)),
                ('intentos_maximos', models.PositiveIntegerField(default=1)),
                ('fecha_inicio', models.DateTimeField(blank=True, null=True)),
                ('fecha_fin', models.DateTimeField(blank=True, null=True)),
                ('activo', models.BooleanField(default=False)),
                ('publicado', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('categorias', models.ManyToManyField(blank=True, to='core.categoria')),
                ('creado_por', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='examenes_creados', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Examen',
                'verbose_name_plural': 'Exámenes',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='EstadisticasExamen',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_intentos', models.PositiveIntegerField(default=0)),
                ('total_aprobados', models.PositiveIntegerField(default=0)),
                ('total_suspensos', models.PositiveIntegerField(default=0)),
                ('puntuacion_promedio', models.FloatField(default=0)),
                ('tiempo_promedio', models.DurationField(default=datetime.timedelta(0))),
                ('porcentaje_aprobados', models.FloatField(default=0)),
                ('puntuacion_maxima', models.FloatField(default=0)),
                ('puntuacion_minima', models.FloatField(default=0)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('examen', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='estadisticas', to='core.examen')),
            ],
            options={
                'verbose_name': 'Estadísticas de Examen',
                'verbose_name_plural': 'Estadísticas de Exámenes',
            },
        ),
        migrations.CreateModel(
            name='IntentosExamen',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fecha_inicio', models.DateTimeField(auto_now_add=True)),
                ('fecha_fin', models.DateTimeField(blank=True, null=True)),
                ('tiempo_empleado', models.DurationField(blank=True, null=True)),
                ('completado', models.BooleanField(default=False)),
                ('puntuacion_obtenida', models.FloatField(default=0)),
                ('porcentaje', models.FloatField(default=0)),
                ('aprobado', models.BooleanField(default=False)),
                ('preguntas_correctas', models.PositiveIntegerField(default=0)),
                ('preguntas_incorrectas', models.PositiveIntegerField(default=0)),
                ('preguntas_sin_responder', models.PositiveIntegerField(default=0)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('estudiante', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='intentos_examenes', to=settings.AUTH_USER_MODEL)),
                ('examen', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='intentos', to='core.examen')),
            ],
            options={
                'verbose_name': 'Intento de Examen',
                'verbose_name_plural': 'Intentos de Examen',
                'ordering': ['-fecha_inicio'],
                'unique_together': {('estudiante', 'examen', 'fecha_inicio')},
            },
        ),
        migrations.CreateModel(
            name='Oposicion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=200)),
                ('descripcion', models.TextField()),
                ('fecha_convocatoria', models.DateField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('alumnos_con_acceso', models.ManyToManyField(blank=True, limit_choices_to={'user_type': 'student'}, related_name='oposiciones_acceso', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Oposiciones',
            },
        ),
        migrations.AddField(
            model_name='examen',
            name='oposicion',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.oposicion'),
        ),
        migrations.CreateModel(
            name='BancoPregunta',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enunciado', models.TextField(help_text='Texto de la pregunta')),
                ('imagen', models.ImageField(blank=True, null=True, upload_to='preguntas/imagenes/')),
                ('explicacion', models.TextField(blank=True, help_text='Explicación de la respuesta correcta')),
                ('dificultad', models.CharField(choices=[('facil', 'Fácil'), ('medio', 'Medio'), ('dificil', 'Difícil')], default='medio', max_length=10)),
                ('puntos', models.PositiveIntegerField(default=1, help_text='Puntos que vale la pregunta')),
                ('tiempo_estimado', models.PositiveIntegerField(default=60, help_text='Tiempo estimado en segundos')),
                ('activa', models.BooleanField(default=True)),
                ('aprobada', models.BooleanField(default=False, help_text='Pregunta revisada y aprobada')),
                ('veces_preguntada', models.PositiveIntegerField(default=0)),
                ('veces_acertada', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('creada_por', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='preguntas_creadas', to=settings.AUTH_USER_MODEL)),
                ('categoria', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='preguntas', to='core.categoria')),
                ('oposicion', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.oposicion')),
            ],
            options={
                'verbose_name': 'Pregunta',
                'verbose_name_plural': 'Banco de Preguntas',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='archivooposicion',
            name='oposicion',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='archivos', to='core.oposicion'),
        ),
        migrations.CreateModel(
            name='PlanEntrenamiento',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=200)),
                ('tipo_plan', models.CharField(choices=[('principiante', 'Principiante'), ('intermedio', 'Intermedio'), ('avanzado', 'Avanzado'), ('precompeticion', 'Pre-competición'), ('mantenimiento', 'Mantenimiento')], default='principiante', max_length=20)),
                ('fase_actual', models.CharField(choices=[('base', 'Fase Base'), ('desarrollo', 'Fase de Desarrollo'), ('pico', 'Pico de Forma'), ('mantenimiento', 'Mantenimiento'), ('recuperacion', 'Recuperación')], default='base', max_length=20)),
                ('fecha_inicio', models.DateField()),
                ('fecha_fin', models.DateField()),
                ('fecha_examen_objetivo', models.DateField(blank=True, null=True)),
                ('dias_entrenamiento_semana', models.IntegerField(default=5)),
                ('duracion_sesion_minutos', models.IntegerField(default=90)),
                ('objetivo_principal', models.TextField()),
                ('objetivos_secundarios', models.TextField(blank=True)),
                ('activo', models.BooleanField(default=True)),
                ('completado', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('estudiante', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='planes_entrenamiento', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Plan de Entrenamiento',
                'verbose_name_plural': 'Planes de Entrenamiento',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PuntuacionUsuario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('puntos_totales', models.IntegerField(default=0)),
                ('puntos_mes_actual', models.IntegerField(default=0)),
                ('puntos_semana_actual', models.IntegerField(default=0)),
                ('puntos_estudio', models.IntegerField(default=0)),
                ('puntos_examenes', models.IntegerField(default=0)),
                ('puntos_fisico', models.IntegerField(default=0)),
                ('puntos_constancia', models.IntegerField(default=0)),
                ('puntos_social', models.IntegerField(default=0)),
                ('racha_dias_consecutivos', models.IntegerField(default=0)),
                ('racha_maxima', models.IntegerField(default=0)),
                ('ultimo_dia_actividad', models.DateField(blank=True, null=True)),
                ('nivel', models.IntegerField(default=1)),
                ('experiencia_actual', models.IntegerField(default=0)),
                ('experiencia_siguiente_nivel', models.IntegerField(default=100)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('usuario', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='puntuacion', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Puntuación de Usuario',
                'verbose_name_plural': 'Puntuaciones de Usuario',
                'ordering': ['-puntos_totales'],
            },
        ),
        migrations.CreateModel(
            name='RespuestaPregunta',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('texto', models.TextField()),
                ('es_correcta', models.BooleanField(default=False)),
                ('orden', models.PositiveIntegerField(default=0)),
                ('explicacion', models.TextField(blank=True, help_text='Explicación de por qué es correcta/incorrecta')),
                ('pregunta', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='respuestas', to='core.bancopregunta')),
            ],
            options={
                'verbose_name': 'Respuesta',
                'verbose_name_plural': 'Respuestas',
                'ordering': ['orden'],
                'unique_together': {('pregunta', 'orden')},
            },
        ),
        migrations.CreateModel(
            name='SesionEntrenamiento',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fecha', models.DateField()),
                ('nombre', models.CharField(max_length=200)),
                ('descripcion', models.TextField(blank=True)),
                ('completada', models.BooleanField(default=False)),
                ('fecha_completado', models.DateTimeField(blank=True, null=True)),
                ('tiempo_total', models.DurationField(blank=True, null=True)),
                ('nivel_esfuerzo', models.IntegerField(blank=True, choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (6, '6'), (7, '7'), (8, '8'), (9, '9'), (10, '10')], help_text='Del 1 al 10', null=True)),
                ('nivel_energia_post', models.IntegerField(blank=True, choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (6, '6'), (7, '7'), (8, '8'), (9, '9'), (10, '10')], help_text='Del 1 al 10', null=True)),
                ('notas_entrenador', models.TextField(blank=True)),
                ('notas_estudiante', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('ejercicios', models.ManyToManyField(through='core.EjercicioSesion', to='core.ejerciciofisico')),
                ('plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sesiones', to='core.planentrenamiento')),
            ],
            options={
                'verbose_name': 'Sesión de Entrenamiento',
                'verbose_name_plural': 'Sesiones de Entrenamiento',
                'ordering': ['fecha'],
                'unique_together': {('plan', 'fecha')},
            },
        ),
        migrations.AddField(
            model_name='ejerciciosesion',
            name='sesion',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.sesionentrenamiento'),
        ),
        migrations.CreateModel(
            name='Tema',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=200)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('alumnos_con_acceso', models.ManyToManyField(blank=True, limit_choices_to={'user_type': 'student'}, related_name='temas_acceso', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='examen',
            name='tema',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.tema'),
        ),
        migrations.AddField(
            model_name='bancopregunta',
            name='tema',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.tema'),
        ),
        migrations.AddField(
            model_name='archivotema',
            name='tema',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='archivos', to='core.tema'),
        ),
        migrations.CreateModel(
            name='LogroUsuario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fecha_obtenido', models.DateTimeField(auto_now_add=True)),
                ('progreso_actual', models.JSONField(default=dict)),
                ('notificado', models.BooleanField(default=False)),
                ('logro', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.logro')),
                ('usuario', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='logros_obtenidos', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Logro de Usuario',
                'verbose_name_plural': 'Logros de Usuario',
                'ordering': ['-fecha_obtenido'],
                'unique_together': {('usuario', 'logro')},
            },
        ),
        migrations.CreateModel(
            name='ParticipacionDesafio',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fecha_inscripcion', models.DateTimeField(auto_now_add=True)),
                ('progreso_actual', models.JSONField(default=dict)),
                ('completado', models.BooleanField(default=False)),
                ('fecha_completado', models.DateTimeField(blank=True, null=True)),
                ('puntos_obtenidos', models.IntegerField(default=0)),
                ('desafio', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.desafiosemanal')),
                ('usuario', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Participación en Desafío',
                'verbose_name_plural': 'Participaciones en Desafíos',
                'ordering': ['-fecha_inscripcion'],
                'unique_together': {('usuario', 'desafio')},
            },
        ),
        migrations.CreateModel(
            name='PreguntaExamen',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('orden', models.PositiveIntegerField()),
                ('intento', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='preguntas_asignadas', to='core.intentosexamen')),
                ('pregunta', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.bancopregunta')),
            ],
            options={
                'verbose_name': 'Pregunta en Examen',
                'verbose_name_plural': 'Preguntas en Examen',
                'ordering': ['orden'],
                'unique_together': {('intento', 'orden')},
            },
        ),
        migrations.CreateModel(
            name='RegistroMarcas',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fecha', models.DateField()),
                ('tiempo_marca', models.DurationField(blank=True, null=True)),
                ('repeticiones_marca', models.IntegerField(blank=True, null=True)),
                ('peso_marca', models.FloatField(blank=True, null=True)),
                ('distancia_marca', models.FloatField(blank=True, null=True)),
                ('es_marca_personal', models.BooleanField(default=False)),
                ('es_objetivo_cumplido', models.BooleanField(default=False)),
                ('mejora_respecto_anterior', models.BooleanField(default=False)),
                ('porcentaje_mejora', models.FloatField(blank=True, null=True)),
                ('puntuacion_baremo', models.FloatField(blank=True, null=True)),
                ('nivel_baremo', models.CharField(blank=True, choices=[('excelente', 'Excelente'), ('bueno', 'Bueno'), ('aceptable', 'Aceptable'), ('insuficiente', 'Insuficiente')], max_length=20, null=True)),
                ('observaciones', models.TextField(blank=True)),
                ('validado_por_entrenador', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('ejercicio', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.ejerciciofisico')),
                ('estudiante', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='marcas_personales', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Registro de Marca',
                'verbose_name_plural': 'Registro de Marcas',
                'ordering': ['-fecha', '-created_at'],
                'unique_together': {('estudiante', 'ejercicio', 'fecha')},
            },
        ),
        migrations.CreateModel(
            name='RespuestaEstudiante',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tiempo_respuesta', models.PositiveIntegerField(blank=True, help_text='Tiempo en segundos', null=True)),
                ('fecha_respuesta', models.DateTimeField(auto_now=True)),
                ('es_correcta', models.BooleanField(default=False)),
                ('intento', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='respuestas_dadas', to='core.intentosexamen')),
                ('pregunta', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.bancopregunta')),
                ('respuesta_seleccionada', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.respuestapregunta')),
            ],
            options={
                'verbose_name': 'Respuesta de Estudiante',
                'verbose_name_plural': 'Respuestas de Estudiantes',
                'unique_together': {('intento', 'pregunta')},
            },
        ),
        migrations.CreateModel(
            name='ProgresoEstudiante',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('porcentaje_completado', models.PositiveIntegerField(default=0)),
                ('tiempo_estudiado', models.PositiveIntegerField(default=0, help_text='Tiempo en minutos')),
                ('ultima_actividad', models.DateTimeField(auto_now=True)),
                ('completado', models.BooleanField(default=False)),
                ('estudiante', models.ForeignKey(limit_choices_to={'user_type': 'student'}, on_delete=django.db.models.deletion.CASCADE, related_name='progreso', to=settings.AUTH_USER_MODEL)),
                ('oposicion', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='progreso_estudiantes', to='core.oposicion')),
                ('tema', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='progreso_estudiantes', to='core.tema')),
            ],
            options={
                'verbose_name': 'Progreso de Estudiante',
                'verbose_name_plural': 'Progreso de Estudiantes',
                'ordering': ['-ultima_actividad'],
                'unique_together': {('estudiante', 'oposicion'), ('estudiante', 'tema')},
            },
        ),
    ]
